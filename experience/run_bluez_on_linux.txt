We will use linux 3.4.74 to show how to run bluetooth.
There is maybe a little different on other linux version.(Not sure :))

a. Select kernel compile option
  1. For USB dongle bluetooth adaptor
      make meconfig ----> networking support--->Bluetooth subsystem support
      First choose 'RFCOMM protocol support' and 'RFCOMM TTY support' to 'Y',
      Then enter 'Bluetooth device drivers' and choose 'HCI USB driver' to 'Y'
      
  2. For UART + PCM bluetooth adaptor
      make meconfig ----> networking support--->Bluetooth subsystem support
      First choose 'RFCOMM protocol support' and 'RFCOMM TTY support' to 'Y',
      Then enter 'Bluetooth device drivers' and choose 'HCI UART driver' and 'UART(H4) protocol support' to 'Y'
      
b. Run dbus and bluetooth daemon application on embed system
  Before running bluez ,make sure the install files are loaded on the embed board. (bluez_bin.tgz in cross_compile_bluez.txt)
  1. For USB dongle bluetooth adaptor
      /*export the path environment*/
      BLUEZ_PATH="/usr/bluez4.95"
      export PATH=$BLUEZ_PATH/sbin:$PATH
      export PATH=$BLUEZ_PATH/bin:$PATH
      export PATH=$BLUEZ_PATH/libexec:$PATH      
      export LD_LIBRARY_PATH=$BLUEZ_PATH/lib:$LD_LIBRARY_PATH
      /*remove the dbus pid to make sure the dbus system run correctly*/
      rm $BLUEZ_PATH/var/run/dbus/pid
      /*start the debus daemon*/
      dbus-daemon --system
      /*start the bluez daemon.*/
      bluetoothd 
      
  2. For UART + PCM bluetooth adaptor
      /*export the path environment*/
      BLUEZ_PATH="/usr/bluez4.95"
      export PATH=$BLUEZ_PATH/sbin:$PATH
      export PATH=$BLUEZ_PATH/bin:$PATH
      export PATH=$BLUEZ_PATH/libexec:$PATH      
      export LD_LIBRARY_PATH=$BLUEZ_PATH/lib:$LD_LIBRARY_PATH
      
      /*Below Command is based on BRCM bluetooth chipset, for others ,you may need use hciattach or other cmd to write the
      correct config into bluetooth chipset
      '/dev/ttyS1' is the UART dev name which is connected to your bluetooth chipset*/
      brcm_patchram_plus --patchram bcm**.hcd --baudrate 3000000 --enable_hci --no2bytes /dev/ttyS1 &
      
      /*after the bluetooth config done(3 or 5 seconds later ?), then we can run bluez daemon.
      I'll append the brcm_patchram_plus source code in this repo, the code is easy to understand*/
      
      /*remove the dbus pid to make sure the dbus system run correctly*/
      rm $BLUEZ_PATH/var/run/dbus/pid
      /*start the debus daemon*/
      dbus-daemon --system
      /*start the bluez daemon.*/
      bluetoothd 
      
c. Now, run 'hciconfig' to make sure the bluetooth can be correctly found
      1. hciconfig -a
          hci0:	Type: BR/EDR  Bus: UART
            BD Address: xx:xx:xx:xx:xx:xx  ACL MTU: 1021:8  SCO MTU: 64:1
            UP RUNNING PSCAN 
            RX bytes:12328 acl:298 sco:0 events:417 errors:0
            TX bytes:8820 acl:257 sco:0 commands:148 errors:0
            Features: 0xbf 0xfe 0xcf 0xfe 0xdb 0xff 0x7b 0x87
            Packet type: DM1 DM3 DM5 DH1 DH3 DH5 HV1 HV2 HV3 
            Link policy: RSWITCH SNIFF 
            Link mode: SLAVE ACCEPT 
            Name: 'xxxxxxx'
            Class: 0x480100
            Service Classes: Capturing, Telephony
            Device Class: Computer, Uncategorized
            HCI Version: 4.0 (0x6)  Revision: 0x6a
            LMP Version: 4.0 (0x6)  Subversion: 0x2209
            Manufacturer: Broadcom Corporation (15)
        /*If use USB dongle, the Bus type will display USB*/
        
       2. 'hcitool scan' to find around devices.
       3. 'sdptool browse local' to get local serivce
       /*For more test tool usage, you can read the source code in bluez 4.95 or refer to the doc outside this floder*/
